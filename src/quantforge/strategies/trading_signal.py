from enum import Enum, auto
from dataclasses import dataclass


class TradingSignalType(Enum):
    """
    Enumeration of possible trading signal types.

    Attributes:
        BUY: Signal to initiate or increase a long position
        SELL: Signal to initiate or increase a short position
        HOLD: Signal to maintain current position
    """

    BUY = auto()  # Buy or go long
    SELL = auto()  # Sell or go short
    HOLD = auto()  # Maintain current position without changes


@dataclass(frozen=True)
class TradingSignal:
    """
    Immutable representation of a trading signal with type and strength.

    This class encapsulates trading signals generated by strategies,
    combining both the direction (buy/sell/hold) and conviction level.

    Attributes:
        signal_type: The type of trading action recommended (BUY/SELL/HOLD)
        signal_strength: A float indicating the conviction level of the signal:
                        - For BUY: 0 to 1 (1 is highest conviction)
                        - For SELL: -1 to 0 (-1 is highest conviction)
                        - For HOLD: 0 to 1 (1 is highest conviction to maintain position)
    """

    signal_type: TradingSignalType
    signal_strength: float

    def __post_init__(self):
        """
        Validates signal strength and type compatibility after initialization.

        Ensures:
        - For BUY signals: strength is between 0 and 1
        - For SELL signals: strength is between -1 and 0
        - For HOLD signals: strength is between 0 and 1

        Raises:
            AssertionError: If validation constraints are violated
        """
        if self.signal_type == TradingSignalType.BUY:
            assert (
                0 < self.signal_strength <= 1
            ), "Buy signal strength must be between 0 and 1 (exclusive of 0)"
        elif self.signal_type == TradingSignalType.SELL:
            assert (
                -1 <= self.signal_strength < 0
            ), "Sell signal strength must be between -1 and 0 (exclusive of 0)"
        elif self.signal_type == TradingSignalType.HOLD:
            assert (
                0 <= self.signal_strength <= 1
            ), "Hold signal strength must be between 0 and 1"

    def get_signal_type(self) -> TradingSignalType:
        """
        Returns the type of trading signal.

        Returns:
            TradingSignalType: The signal type (BUY/SELL/HOLD)
        """
        return self.signal_type

    def get_signal_strength(self) -> float:
        """
        Returns the strength/conviction level of the signal.

        Returns:
            float: The signal strength value:
                - For BUY: 0 to 1 (positive values)
                - For SELL: -1 to 0 (negative values)
                - For HOLD: 0 to 1
        """
        return self.signal_strength
